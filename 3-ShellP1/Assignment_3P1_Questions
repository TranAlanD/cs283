1. In this assignment I suggested you use `fgets()` to get user input in the main while loop. Why is `fgets()` a good choice for this application?

    > **Answer**: _fgets() is a good choice for this application because it reads a line of input until the EOF or a newline character. In this case, we can always get 1 line at a time and process that. Moreover, this means that every command is null-terminated as it reads until EOF or \n, so it's easy to work with inputs.

2. You needed to use `malloc()` to allocte memory for `cmd_buff` in `dsh_cli.c`. Can you explain why you needed to do that, instead of allocating a fixed-size array?

    > **Answer**:  _Allocating the memory allows for dynamic memory allocation which is good for removing wasted space if we allocate too much memory. Moreover, if there are bigger commands, this can be changed to easily deal with them.


3. In `dshlib.c`, the function `build_cmd_list(`)` must trim leading and trailing spaces from each command before storing it. Why is this necessary? If we didn't trim spaces, what kind of issues might arise when executing commands in our shell?

    > **Answer**: _We need to trim the leading and trailing spaces to make sure everything works correctly. If we didn't do this, there may be misinterpretation in our commands. For example, the command may not be found if you're trying to find it by splitting with " ". 

4. For this question you need to do some research on STDIN, STDOUT, and STDERR in Linux. We've learned this week that shells are "robust brokers of input and output". Google _"linux shell stdin stdout stderr explained"_ to get started.

- One topic you should have found information on is "redirection". Please provide at least 3 redirection examples that we should implement in our custom shell, and explain what challenges we might have implementing them.

    > **Answer**: _3 redirection examples include: ">" output redirection, "<" input redirection, and ">>" appended output redirection. The output redirection can be challenging because I'd have to make sure not to overwrite previous data that I may need. Input redirection may be challenging because I need to make sure files exists and make sure they take care of EOF. Lastly, appended redirection can be challenging because I have to manage pointers, similar to what I did in this project, which I messed up alot. These would be good to add to the shell because we would be able to save and add data to files.

- You should have also learned about "pipes". Redirection and piping both involve controlling input and output in the shell, but they serve different purposes. Explain the key differences between redirection and piping.

    > **Answer**: _Redirection redirects the flow of data between files while piping passes the output of one command to the input of another command.

- STDERR is often used for error messages, while STDOUT is for regular output. Why is it important to keep these separate in a shell?

    > **Answer**: _One reason these should be kept separate is because it's good organization. This is because it helps easily distinguish between error and normal outputs.

- How should our custom shell handle errors from commands that fail? Consider cases where a command outputs both STDOUT and STDERR. Should we provide a way to merge them, and if so, how?

    > **Answer**: _Our shell should get STDERR and STDOUT separately so we can make it clear which is which. However, merging them would be good as well because we can see both the regular output and the error that goes along with it. We can do this by redirecting them to the same place
