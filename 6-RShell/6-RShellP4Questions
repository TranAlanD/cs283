1. How does the remote client determine when a command's output is fully received from the server, and what techniques can be used to handle partial reads or ensure complete message transmission?

_The remote client determines a command's output is fully received from the server when the the end of message EOF appears, which is the RDSH_EOF_CHAR from rshlib.h. If we wanted to chandle partial reads, we could do something similar to how we made dshlib.c by waiting until any EOF indicator is read. We could also fix a length on the command to stop reading after a certain amount of characters have been read._

2. This week's lecture on TCP explains that it is a reliable stream protocol rather than a message-oriented one. Since TCP does not preserve message boundaries, how should a networked shell protocol define and detect the beginning and end of a command sent over a TCP connection? What challenges arise if this is not handled correctly?

_TCP is a stream protocol that we described in class to send a steady flow of information. We also described that because it doesn't have boundaries, we can use delimeters to deal with the end of a TCP boundary. In my code's case, I check until the EOF is read in my message (when it's being received). If we are talking about getting the start of a message, we described in class that we can attach a header to the message, which will be processed as it's received. This will indicate the start of the message, and the EOF will signal the end.

If the TCP connection isn't handled correctly, we may end up with broken messages or data corruption. The cause for broken messages is because the message may be cut early or late. In the case of being cut early, we may have a cut anywhere before the EOF. In the case of the message no ending, we are reading something that doesn't exist, which may corrupt the data and program._

3. Describe the general differences between stateful and stateless protocols.

_Statefull protocols maintain multiple interactions with the server to track the sender's messages. Thus, the server keeps track of the actions made. This is more reliable and has more capabilities, but is slower with more overhead. Stateless protocols treat requests independently with no interactions, which reduces overhead and is faster. However, this is not fully reliable and can lead to redundant data sending or even loss of data._

4. Our lecture this week stated that UDP is "unreliable". If that is the case, why would we ever use it?

_The lecture described UDP as unreliable because it isn't guaranteed to deliver all the information, some could get lost and we'd never know. However, if it's for speed, this is a fast protocol. If we think of it similar to the FedEx example from class, we can deliver a package to a house and it's fast. However, although not every package, some packages may get lost in the process. So, sometimes speed is needed over 100% of the data. Contexts where we could use this is social media videos, they need fast data transfer, but sometimes they buffer._

5. What interface/abstraction is provided by the operating system to enable applications to use network communications?

_Sockets the the operating system's innterface that allows applications to use network communications. They are abstractions that lets applications read and write on the network when dealing with I/O files. Sockets allows us to create client and server applications to send a receive data, as well as handle multiple connections._
